@page "/"
@rendermode InteractiveServer
@using System.Text;
@inject IHttpClientFactory httpClientFactory;
@inject ISnackbar snackbar;
@inject ISessionStorageService sessionStorage;

<PageTitle>Home</PageTitle>

@if (user == null)
{
}
else
{
    <MudButton OnClick="SignOut">Sign Out</MudButton>
}

@code {
    User? user { get; set; } = null;

    #if DEBUG
    string username { get; set; } = "jack.battye@hotmail.co.uk";
    string password { get; set; } = "Sp@rtan117";
#else
    string username { get; set; }
    string password { get; set; }
#endif

    IList<BlobDetail>? blobDetails = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender || user == null)
        {
            user = await sessionStorage.GetItemAsync<User>("user");

            if (user != null)
            {
                StateHasChanged();
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task submit()
    {
        try
        {
            if (string.IsNullOrEmpty(username) || string.IsNullOrEmpty(password))
            {
                return;
            }

            string basicAuth = Convert.ToBase64String(Encoding.UTF8.GetBytes($"{username}:{password}"));

            HttpClient client = httpClientFactory.CreateClient("api");

            HttpRequestMessage authRequestMessage = new HttpRequestMessage(HttpMethod.Get, "Authentication");
            authRequestMessage.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Basic", basicAuth);
            HttpResponseMessage authResponse = await client.SendAsync(authRequestMessage);

            if (authResponse.IsSuccessStatusCode)
            {
                HttpRequestMessage userRequestMessage = new HttpRequestMessage(HttpMethod.Get, "/User");
                HttpResponseMessage userResponseMessage = await client.SendAsync(userRequestMessage);

                if (userResponseMessage.IsSuccessStatusCode)
                {
                    string userContent = await userResponseMessage.Content.ReadAsStringAsync();
                    user = JsonConvert.DeserializeObject<User>(userContent);

                    if(user != null)
                    {
                        user.Password = string.Empty;
                        user.PasswordSalt = string.Empty;

                        await sessionStorage.SetItemAsync<User>("user", user);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            snackbar.Add(ex.Message, Severity.Error);
        }
    }
    private async Task OnFileChanged(InputFileChangeEventArgs eventArgs)
    {
        try
        {
            int length = (int)eventArgs.File.OpenReadStream().Length;

            byte[] imgData = new byte[length];
            await eventArgs.File.OpenReadStream().ReadAsync(imgData, 0, length);

            string base64Image = Convert.ToBase64String(imgData);

            FileUpload fileUpload = new FileUpload()
            {
                FileName = $"{Guid.NewGuid().ToString()}",
                ContainerName = "pictures",
                DataBase64 = base64Image,
                FileExtension = "png"
            };
            string content = JsonConvert.SerializeObject(fileUpload);

            HttpClient client = httpClientFactory.CreateClient("api");
            HttpRequestMessage requestMessage = new HttpRequestMessage(HttpMethod.Post, "/Blob");
            requestMessage.Content = new StringContent(content, Encoding.UTF8, "application/json");

            HttpResponseMessage responseMessage = await client.SendAsync(requestMessage);

            if (responseMessage.IsSuccessStatusCode)
            {
                string respoinseContent = await responseMessage.Content.ReadAsStringAsync();
            }
        }
        catch(Exception ex)
        {
            snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task SignOut()
    {
        await sessionStorage.RemoveItemAsync("user");
        user = null;
    }

}
