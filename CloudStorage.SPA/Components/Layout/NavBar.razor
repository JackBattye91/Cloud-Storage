@inject ISessionStorageService sessionStorage;
@inject ILocalStorageService localStorage;
@inject ProtectedLocalStorage protectedLocalStorage
@inject NavigationManager navManager;
@rendermode InteractiveServer

<MudAppBar Color="Color.Primary" Fixed="false">
    <MudIconButton OnClick="() => { showMenuBar = !showMenuBar; }" Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" />
    <MudSpacer />

    @if (user == null)
    {
        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" Href="/login" StartIcon="@Icons.Material.Filled.Login">Login/Register</MudButton>
    }
    else
    {
        <MudAvatar @onclick="SignOut" Color="Color.Primary">@char.ToUpper(user.Username[0])</MudAvatar>
    }
</MudAppBar>

<MudDrawer @bind-Open="@showMenuBar" Anchor="Anchor.Left" Elevation="1" Variant="@DrawerVariant.Temporary">
    <MudDrawerHeader>
        <MudLink Href="/" Typo="Typo.h5">Cloud Storage</MudLink>
    </MudDrawerHeader>
    <MudNavMenu>
        <MudNavLink Href="/" Match="NavLinkMatch.All">Home</MudNavLink>

        @if (user != null)
        {
            <MudNavLink Href="/gallery" Match="NavLinkMatch.All">Gallery</MudNavLink>
        }
        
    </MudNavMenu>
</MudDrawer>


@if (user != null && false)
{
    <MudDrawer @bind-Open="@showProfileBar" Anchor="Anchor.Right" Elevation="1" Variant="@DrawerVariant.Temporary">
    <MudDrawerHeader>
        <MudText Typo="Typo.h5">@user?.Username</MudText>
        </MudDrawerHeader>
        <MudNavMenu>
            <MudNavLink Href="/" Match="NavLinkMatch.All">Home</MudNavLink>
            <MudNavLink Href="/gallery" Match="NavLinkMatch.All">Gallery</MudNavLink>
        </MudNavMenu>
    </MudDrawer>
}

@code {
    bool showMenuBar = false;
    bool showProfileBar = false;
    User? user = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (user == null)
            {
                user = (await protectedLocalStorage.GetAsync<User>(Consts.Storage.USER)).Value;
                if (user != null)
                {
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task SignOut()
    {
        await sessionStorage.RemoveItemAsync(Consts.Storage.USER);
        user = null;
        navManager.NavigateTo("/");
        StateHasChanged();
    }
}