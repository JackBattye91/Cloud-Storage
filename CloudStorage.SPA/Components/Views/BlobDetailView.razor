@rendermode InteractiveServer
@inject ILogger<BlobDetailView> logger;
@inject IHttpClientFactory clientfactory;

<MudItem xs="6" sm="4" md="3" lg="3" @onclick="OnClick">
    <MudStack Class="pb-5">
        <MudItem Class="text-center">
            @if (thumbnailData?.Length == 0)
            {
                <MudIcon Icon="@Icons.Material.Filled.HideImage" Size="Size.Large"/>
            }
            else if (thumbnailData == null)
            {
                <MudProgressCircular Indeterminate="true"/>
            }
            else
            {
                <MudImage Style="height: 100px; max-width: 100%" Src="@CreateBase64Image()" ObjectFit="ObjectFit.Contain" />
            }       
        </MudItem>

        <MudItem>
            <MudText Align="Align.Center">@FileName</MudText>
        </MudItem>
    </MudStack>
</MudItem>


@code {
    [Parameter]
    public IBlobDetail BlobDetail { get; set; }
    [Parameter]
    public EventCallback<MouseEventArgs> OnClick { get; set; }
    [Parameter]
    public EventCallback<MouseEventArgs> OnDelete { get; set; }

    string? thumbnailData { get; set; }

    private string FileName {
        get {
            int start = BlobDetail.FileName.LastIndexOf('/');
            return start == -1 ? BlobDetail.FileName : BlobDetail.FileName.Substring(start + 1);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetThumbnail();
        }
        
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task<string?> GetThumbnail()
    {
        try
        {
            if (BlobDetail != null)
            {
                HttpClient client = clientfactory.CreateClient("api");
                HttpRequestMessage requestMessage = new HttpRequestMessage(HttpMethod.Get, $"/Blob/thumbnail/{BlobDetail.Id}");

                HttpResponseMessage responseMessage = await client.SendAsync(requestMessage);
                if (responseMessage.IsSuccessStatusCode)
                {
                    byte[] imageData = await responseMessage.Content.ReadAsByteArrayAsync();
                    thumbnailData = Convert.ToBase64String(imageData);
                    StateHasChanged();
                }
                else if (responseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
                {
                    thumbnailData = string.Empty;
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            logger.LogError(ex.Message);
        }

        return null;
    }
    private string CreateBase64Image()
    {
        return $"data:image/jpeg;base64, {thumbnailData}";
    }

    private async Task OnDeleteClicked()
    {
        await OnDelete.InvokeAsync();
    }
}
