@rendermode InteractiveServer
@inject IJSRuntime jsRuntime
@inject BlobService _blobService;

<MudContainer Class="text-center" @onmousedown="OnMouseButtonDown" @onmouseup="OnMouseButtonUp">
    @if (ShowCheckbox == true)
    {
        <MudCheckBox @bind-Value="@Selected" UncheckedIcon="@Icons.Material.Outlined.RadioButtonUnchecked" CheckedIcon="@Icons.Material.Outlined.CheckCircle" />
    }

    <img src="@string.Format("data:image/png;base64, {0}", Base64Image)" style="max-width: 80%; max-height: 256px;" />
    <MudText Typo="Typo.body1">@BlobDetail.Name</MudText>
    <MudText Typo="Typo.caption">@BlobDetail.Description</MudText>
</MudContainer>

@code {
    [Parameter]
    public Models.BlobDetail BlobDetail { get; set; } = default!;
    private string? Base64Image;
    private string imageId = string.Empty;
    private bool? Selected { get; set; }
    private DateTime? MouseDownTimer;

    static bool ShowCheckbox { get; set; }

    [Parameter]
    public EventCallback OnClick { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        imageId = string.Format("blobThumbnail_{0}", BlobDetail.Id);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _ = GetThumbnailImage();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    protected async Task OnMouseButtonDown(MouseEventArgs args)
    {
        if (args.Button == 0)
        {
            MouseDownTimer = DateTime.UtcNow;
        }
    }

    protected async Task OnMouseButtonUp(MouseEventArgs args)
    {
        if (args.Button == 0 && MouseDownTimer != null)
        {

        }
    }

    protected TimerCallback MousetimerCallback()
    {
        
    }

    protected async Task GetThumbnailImage()
    {
        try
        {
            using (Stream imgStream = await _blobService.GetThumbnail(BlobDetail.Id))
            {
                int bytesRead = 0;
                byte[] buffer = new byte[1024];
                List<byte> base64Data = new List<byte>();

                do
                {
                    bytesRead = await imgStream.ReadAsync(buffer, 0, 1024);
                    base64Data.AddRange(buffer[..bytesRead]);
                } while (bytesRead > 0);

                Base64Image = Convert.ToBase64String(base64Data.ToArray());
                StateHasChanged();
            }
            /*
            MemoryStream memoryStream = new MemoryStream();
            await imgStream.CopyToAsync(memoryStream);

            await jsRuntime.InvokeVoidAsync("setImageUsingStream", imageId, memoryStream);
            */
        }
        catch (Exception ex)
        {
            
        }
    }
}
