@rendermode InteractiveServer
@inject IJSRuntime jsRuntime
@inject BlobService _blobService;
@inject ILogger<BlobDetailView> _logger;

<MudContainer Class="text-center" @onclick="() => { OnClick.InvokeAsync(); }">
    @if (Base64Image == null)
    {
        <MudProgressCircular Indeterminate="true"/>
    }
    else
    {
        <div style="position: relative">
            <MudCheckBox T="bool" ValueChanged="OnSelectedChanged" Color="Color.Dark" UncheckedIcon="@Icons.Material.Filled.RadioButtonUnchecked" CheckedIcon="@Icons.Material.Filled.CheckCircle" Style="position:absolute; top: 0px; right: 0px;" />
            <img src="@string.Format("data:image/png;base64, {0}", Base64Image)" style="max-width: 100%; max-height: 256px;" />
        </div>
    }
    
    <MudText Typo="Typo.body1">@BlobDetail.Name</MudText>
    <MudText Typo="Typo.caption">@BlobDetail.Description</MudText>
</MudContainer>

@code {
    [Parameter]
    public Models.BlobDetail BlobDetail { get; set; } = default!;

    [Parameter]
    public bool ShowCheckbox { get; set; }

    [Parameter]
    public EventCallback OnClick { get; set; }

    [Parameter]
    public EventCallback OnLongClick { get; set; }

    [Parameter]
    public EventCallback<bool> OnSelected { get; set; }


    private string? Base64Image;
    private string imageId = string.Empty;
    private bool Selected { get; set; } = false;
    private DateTime? MouseDownTime;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        imageId = string.Format("blobThumbnail_{0}", BlobDetail.Id);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _ = GetThumbnailImage();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    protected void OnMouseButtonDown(MouseEventArgs args)
    {
        if (args.Button == 0 && MouseDownTime == null)
        {
            MouseDownTime = DateTime.UtcNow;
        }
    }

    protected async Task OnMouseButtonUp(MouseEventArgs args)
    {
        if (args.Button == 0 && MouseDownTime != null)
        {
            DateTime now = DateTime.UtcNow;

            if (MouseDownTime.Value.AddMilliseconds(200) < now)
            {
                Selected = true;
                MouseDownTime = null;
                await OnLongClick.InvokeAsync();
            }
        }
    }

    protected async Task GetThumbnailImage()
    {
        try
        {
            using (Stream imgStream = await _blobService.GetThumbnail(BlobDetail.Id))
            {
                int bytesRead = 0;
                byte[] buffer = new byte[1024];
                List<byte> base64Data = new List<byte>();

                do
                {
                    bytesRead = await imgStream.ReadAsync(buffer, 0, 1024);
                    base64Data.AddRange(buffer[..bytesRead]);
                } while (bytesRead > 0);

                Base64Image = Convert.ToBase64String(base64Data.ToArray());
                StateHasChanged();
            }
            /*
            MemoryStream memoryStream = new MemoryStream();
            await imgStream.CopyToAsync(memoryStream);

            await jsRuntime.InvokeVoidAsync("setImageUsingStream", imageId, memoryStream);
        */
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "GetThumbnailImage Failed");
        }
    }

    protected async Task OnSelectedChanged(bool value)
    {
        await OnSelected.InvokeAsync(value);
    }
}
