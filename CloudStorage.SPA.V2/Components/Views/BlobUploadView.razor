@rendermode InteractiveServer
@inject BlobService _blobService;
@inject ILogger<BlobUploadView> _logger;

<MudContainer Style="width: 80vw; height: 80vh; background-color: #FFFFFFFF;">
    <MudGrid>
        <MudItem xs="12">
            <MudGrid>
                <MudItem xs="9">
                    <MudText Typo="Typo.h2">Upload</MudText>
                </MudItem>
                <MudItem xs="3" Class="text-end">
                    <MudIconButton Icon="@Icons.Material.Filled.Close" OnClick="() => { OnClose.InvokeAsync(); }" />
                </MudItem>
            </MudGrid>
        </MudItem>

        <MudItem xs="12">
            <MudGrid>
                <MudItem xs="10">
                    <MudFileUpload id="fileUpload" T="IReadOnlyList<IBrowserFile>" Hidden="true" OnFilesChanged="OnFileChanged" />
                    <MudButton for="fileUpload" HtmlTag="label" StartIcon="@Icons.Material.Filled.Add"  Color="Color.Primary">Add</MudButton>
                </MudItem>

                <MudItem xs="2" Class="text-end">
                    <MudButton StartIcon="@Icons.Material.Filled.Upload" Variant="Variant.Filled" Color="Color.Primary" OnClick="UploadFiles">Upload</MudButton>
                </MudItem>
            </MudGrid>
        </MudItem>

        <MudItem xs="12" Style="overflow: scroll; height: 60vh; margin: 10px;">
            @if (BrowserFiles.Count > 0)
            {
                <MudGrid>
                    @foreach (var item in BrowserFiles)
                    {
                        <BlobUploadFileView File="@item" OnDeleted="RemoveFile" />
                    }
                </MudGrid>
            }
            else
            {
                <MudText>No Files</MudText>
            }
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private bool IsUploading { get; set; } = false;
    private IList<IBrowserFile> BrowserFiles { get; set; } = new List<IBrowserFile>();

    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter]
    public EventCallback<IList<Models.BlobDetail>> OnFilesUploaded { get; set; }

    private async Task UploadFiles()
    {
        IList<Models.BlobDetail> uploadedBlobDetails = new List<Models.BlobDetail>();
        try
        {
            IsUploading = true;

            foreach (IBrowserFile image in BrowserFiles)
            {
                string extension = "";

                if (image.Name.Contains('.'))
                {
                    extension = image.Name.Substring(image.Name.LastIndexOf('.') + 1);
                }

                Models.BlobDetail blobDetail = new Models.BlobDetail()
                {
                    Id = Guid.NewGuid().ToString(),
                    Name = image.Name,
                    Description = "",
                    MimeType = image.ContentType,
                    Extension = extension
                };

                var imgStream = image.OpenReadStream();
                Models.BlobDetail? uploadedBlob = await _blobService.UploadStreamAsync(blobDetail, imgStream);

                if (uploadedBlob != null)
                {
                    uploadedBlobDetails.Add(uploadedBlob);
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "UploadFiles Failed");
        }

        await OnFilesUploaded.InvokeAsync(uploadedBlobDetails);
        IsUploading = false;
    }


    private async Task OnFileChanged(InputFileChangeEventArgs e)
    {
        if (BrowserFiles != null)
        {
            foreach (var file in e.GetMultipleFiles())
            {
                BrowserFiles.Add(file);
            }

            StateHasChanged();
        }
    }

    private void RemoveFile(IBrowserFile file)
    {
        BrowserFiles.Remove(file);
        StateHasChanged();
    }
}
