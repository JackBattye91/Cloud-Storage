@rendermode InteractiveServer
@inject ILogger<BlobUploadFileView> _logger;
@*@inject IJSRuntime jsRuntime;*@

<MudItem xs="4" Class="text-center">

    @if (Base64Image != null)
    {
        <img id="imageId" src="@string.Format("data:image/png;base64, {0}", Base64Image)" style="max-width: 80%; max-height: 256px;"/>
    }
    else if (IsImageLoading)
    {
        <MudProgressCircular Indeterminate="true"/>
    }

    <MudText Class="text-center">@File.Name</MudText>
    <MudText Class="text-center">@GetFileSize(File)</MudText>
    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="DeleteClick" />
</MudItem>


@code {
    [Parameter]
    public IBrowserFile File { get; set; } = default!;

    [Parameter]
    public EventCallback<IBrowserFile> OnDeleted { get; set; } = new EventCallback<IBrowserFile>();

    private string? Base64Image;
    private bool IsImageLoading = false;
    private CancellationTokenSource ImageLoadCancellationToken = new CancellationTokenSource();

    protected override async Task OnInitializedAsync()
    {
        await GetBase64Image();
        await base.OnInitializedAsync();
    }

    private async Task GetBase64Image()
    {
        try
        {
            IsImageLoading = true;
            using (Stream fStream = File.OpenReadStream())
            {
                int bytesRead = 0;
                byte[] buffer = new byte[1024];
                List<byte> base64Data = new List<byte>();

                do
                {
                    bytesRead = await fStream.ReadAsync(buffer, 0, 1024);
                    base64Data.AddRange(buffer[..bytesRead]);
                } while (bytesRead > 0);

                Base64Image = Convert.ToBase64String(base64Data.ToArray());
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "GetThumbnailImage Failed");
        }

        IsImageLoading = false;
    }

    private async Task DeleteClick(MouseEventArgs e)
    {
        ImageLoadCancellationToken.Cancel();
        await OnDeleted.InvokeAsync(File);
    }

    private static string GetFileSize(IBrowserFile file)
    {
        long size = file.Size;
        string prefix = "b";
        int index = 0;

        if (size > 1000)
        {
            size /= 1000;
            index++;
        }

        switch (index)
        {
            case 1:
                prefix = "kb";
                break;
            case 2:
                prefix = "mb";
                break;
            case 3:
                prefix = "gb";
                break;
            case 4:
                prefix = "tb";
                break;
        }

        return string.Format("{0}{1}", size, prefix);
    }
}
