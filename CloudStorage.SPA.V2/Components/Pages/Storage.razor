@page "/storage"
@rendermode InteractiveServer
@*@attribute [Authorize(Policy = "Password")]*@
@inject BlobService _blobService;

<PageTitle>Storage</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large">
    <MudGrid>
        <MudItem xs="12">
            <InputFile id="fileInput" multiple hidden accept=".png, .jpg, .gif" OnChange="OnChangeInputFile" />
            <MudIconButton for="fileInput" HtmlTag="label" Icon="@Icons.Material.Filled.Add" Color="Color.Primary" />
            <MudIconButton Icon="@Icons.Material.Filled.CreateNewFolder" Color="Color.Primary" />
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" />
        </MudItem>
    </MudGrid>
</MudContainer>

<MudDivider DividerType="DividerType.Middle" />
<MudContainer MaxWidth="MaxWidth.Large">
    @if (BlobDetails == null)
    {
        <MudProgressCircular Indeterminate="true"/>
    }
    else
    {
        <MudGrid>
            @foreach (Models.BlobDetail blobDetail in BlobDetails)
            {
                <CloudStorage.SPA.V2.Components.Views.BlobDetailView BlobDetail="blobDetail"/>
            }
        </MudGrid>
    }
    
</MudContainer>

@code {
    private List<Models.BlobDetail>? BlobDetails { get; set; }
    private bool IsUploading { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        BlobDetails = new List<Models.BlobDetail>()
        {
            new Models.BlobDetail() { Id = Guid.NewGuid().ToString(), Name = "Testing", Description="Description" }    
        };
    }

    private async Task<Models.BlobDetail?> OnChangeInputFile(InputFileChangeEventArgs e)
    {
        try
        {
            IsUploading = true;
            IReadOnlyList<IBrowserFile> uploadedImages = e.GetMultipleFiles(10);

            foreach(IBrowserFile image in uploadedImages)
            {
                var imgStream = image.OpenReadStream();
                Models.BlobDetail blobDetail = new Models.BlobDetail()
                {
                    Id = Guid.NewGuid().ToString(),
                    Name = "Testing 01",
                    Description = "Testing Description",
                    Extension = "images/png"
                };

                Models.BlobDetail? uploadedBlob = await _blobService.UploadStreamAsync(blobDetail, imgStream);

                if (uploadedBlob != null)
                {
                    return uploadedBlob;
                }
            }
        } 
        catch (Exception ex)
        {

        }

        IsUploading = false;
        return null;
    }
}
