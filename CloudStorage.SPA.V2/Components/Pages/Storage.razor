@page "/storage"
@rendermode InteractiveServer
@*@attribute [Authorize(Policy = "Password")]*@
@inject BlobService _blobService;
@inject IJSRuntime jsRuntime;

<PageTitle>Storage</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large">
    <MudGrid>
        <MudItem xs="12">
            <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="OnAdd" />
            <!--<MudIconButton Icon="@Icons.Material.Filled.CreateNewFolder" Color="Color.Primary" OnClick="OnCreateFolder" />-->
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => { OverlayType = Consts.OverlayType.Delete; ShowOverlay = true; }" />
        </MudItem>
    </MudGrid>
</MudContainer>

<MudDivider DividerType="DividerType.FullWidth" />
<MudContainer MaxWidth="MaxWidth.Large">
    @if (BlobDetails == null)
    {
        <MudProgressCircular Indeterminate="true"/>
    }
    else
    {
        <MudGrid Class="p-3">
            @foreach (Models.BlobDetail blobDetail in BlobDetails.Where(x => x.IsDirectory).ToList())
            {
                <MudItem xs="6" sm="4" xl="3">
                    <CloudStorage.SPA.V2.Components.Views.BlobDetailView BlobDetail="@blobDetail" OnClick="async () => {  }" OnSelected="(selected) => { }" />
                </MudItem>
            }

            @foreach (Models.BlobDetail blobDetail in BlobDetails.Where(x => !x.IsDirectory).ToList())
            {
                <MudItem xs="6" sm="4" xl="3">
                    <CloudStorage.SPA.V2.Components.Views.BlobDetailView BlobDetail="@blobDetail" OnClick="async () => { await ShowFullImage(blobDetail); }" OnSelected="(selected) => { UpdatedSelectedItems(selected, blobDetail); }" />
                </MudItem>
            }
        </MudGrid>
    }
</MudContainer>

<MudOverlay @bind-Visible="ShowOverlay" DarkBackground AutoClose="false" LockScroll="false">
    @switch (OverlayType)
    {
        default:
        case Consts.OverlayType.Upload:
            <CloudStorage.SPA.V2.Components.Views.BlobUploadView OnFilesUploaded="OnFilesUploaded" OnClose="OnOverlayClosed" />
            break;

        case Consts.OverlayType.Edit:
            <CloudStorage.SPA.V2.Components.Views.FullImageView BlobDetail="FullImageBlobDetails" OnClose="OnOverlayClosed" />
            break;

        case Consts.OverlayType.Delete:
            <CloudStorage.SPA.V2.Components.Views.BlobDeleteView BlobDetails="SelectedBlobDetails" OnClose="OnPopupDeleteBlobClosed" />
            break;

        case Consts.OverlayType.CreateFolder:
            <CloudStorage.SPA.V2.Components.Views.CreateFolderView OnClose="OnPopupCreateFolderClosed" OnFolderCreated="OnFolderCreated"/>
            break;
    }
</MudOverlay>

@code {
    private Consts.OverlayType OverlayType = Consts.OverlayType.Upload;
    private IList<Models.BlobDetail>? BlobDetails { get; set; }
    private bool ShowOverlay { get; set; } = false;
    private bool IsUploading { get; set; } = false;
    private Models.BlobDetail? FullImageBlobDetails { get; set; } = null;
    private bool ShowSelectCheckbox { get; set; } = false;
    private IList<Models.BlobDetail> SelectedBlobDetails { get; set; } = new List<Models.BlobDetail>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _ = GetBlobDetails();
    }

    private void OnFilesUploaded(IList<Models.BlobDetail> uploadedBlobDetails)
    {
        foreach (var detail in uploadedBlobDetails)
        {
            BlobDetails?.Add(detail);
        }
        ShowOverlay = false;
        StateHasChanged();
    }

    private async Task GetBlobDetails()
    {
        BlobDetails = await _blobService.GetBlobDetails();
        StateHasChanged();
    }

    private async Task ShowFullImage(Models.BlobDetail blobDetail)
    {
        FullImageBlobDetails = blobDetail; 
        OverlayType = Consts.OverlayType.Edit; 
        ShowOverlay = true;
        StateHasChanged();
    }

    private async Task OnOverlayClosed()
    {
        FullImageBlobDetails = null;
        ShowOverlay = false;
        OverlayType = Consts.OverlayType.Upload;
    }

    private async Task OnPopupDeleteBlobClosed(bool success)
    {
        if (success)
        {
            for (int b = SelectedBlobDetails.Count - 1; b >= 0; b--)
            {
                _ = DeleteBlob(SelectedBlobDetails[b]);
            }
        }

        await OnOverlayClosed();
    }

    private async Task OnPopupCreateFolderClosed(bool success)
    {
        await OnOverlayClosed();
    }

    private async Task OnFolderCreated(BlobDetail blobDetail)
    {
        BlobDetails?.Add(blobDetail);
        StateHasChanged();
    }

    private async Task DeleteBlob(Models.BlobDetail blobDetail)
    {
        await _blobService.DeleteBlobAsync(blobDetail.Id);
        BlobDetails?.Remove(blobDetail);
        SelectedBlobDetails.Remove(blobDetail);

        StateHasChanged();
    }

    private async Task CreateFolder()
    {
        
    }

    private async Task OnAdd()
    {
        OverlayType = Consts.OverlayType.Upload; 
        ShowOverlay = true;
    }
    private async Task OnDelete()
    {
        OverlayType = Consts.OverlayType.Delete;
        ShowOverlay = true;
        SelectedBlobDetails.Clear();
    }
    private async Task OnCreateFolder()
    {
        OverlayType = Consts.OverlayType.CreateFolder;
        ShowOverlay = true;
    }

    private async Task<string> GetBase64Image()
    {
        if (FullImageBlobDetails != null)
        {
            using (Stream fStream = await _blobService.GetThumbnail(FullImageBlobDetails.Id))
            {
                int bytesRead = 0;
                byte[] buffer = new byte[1024];
                List<byte> base64Data = new List<byte>();

                do
                {
                    bytesRead = await fStream.ReadAsync(buffer, 0, 1024);
                    base64Data.AddRange(buffer[..bytesRead]);
                } while (bytesRead > 0);

                string base64Image = Convert.ToBase64String(base64Data.ToArray());

                return string.Format("data:image/png;base64, {0}", base64Image);
            }
        }

        return string.Empty;
    }
    private void UpdatedSelectedItems(bool selected, BlobDetail blobDetail)
    {
        if (selected)
        {
            SelectedBlobDetails.Add(blobDetail);
        }
        else
        {
            SelectedBlobDetails.Remove(blobDetail);
        }
    }
}
