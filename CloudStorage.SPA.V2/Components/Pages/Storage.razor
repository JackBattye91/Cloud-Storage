@page "/storage"
@rendermode InteractiveServer
@*@attribute [Authorize(Policy = "Password")]*@
@inject BlobService _blobService;

<PageTitle>Storage</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large">
    <MudGrid>
        <MudItem xs="12">
            <MudIconButton HtmlTag="label" Icon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="() => { ShowOverlay = true; }"/>
            <MudIconButton Icon="@Icons.Material.Filled.CreateNewFolder" Color="Color.Primary" />
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" />
        </MudItem>
    </MudGrid>
</MudContainer>

<MudDivider DividerType="DividerType.Middle" />
<MudContainer MaxWidth="MaxWidth.Large">
    @if (BlobDetails == null)
    {
        <MudProgressCircular Indeterminate="true"/>
    }
    else
    {
        <MudGrid Class="p-3">
            @foreach (Models.BlobDetail blobDetail in BlobDetails)
            {
                <MudItem xs="6" sm="4" xl="3">
                    <CloudStorage.SPA.V2.Components.Views.BlobDetailView BlobDetail="blobDetail" OnClick="async () => { await ShowFullImage(blobDetail); }"/>
                </MudItem>
            }
        </MudGrid>
    }
</MudContainer>

<MudOverlay @bind-Visible="ShowOverlay" DarkBackground AutoClose="false" LockScroll="false">
    @switch(overlayType)
    {
        default:
        case Consts.OverlayType.Upload:
            <CloudStorage.SPA.V2.Components.Views.BlobUploadView OnClose="() => { ShowOverlay = false; }" OnFilesUploaded="OnFilesUploaded" />
            break;

        case Consts.OverlayType.Image:
            break;
    }
</MudOverlay>

@code {
    private Consts.OverlayType overlayType = Consts.OverlayType.Upload;
    private IList<Models.BlobDetail>? BlobDetails { get; set; }
    private bool ShowOverlay { get; set; } = false;
    private bool IsUploading { get; set; } = false;
    private Models.BlobDetail? FullImageBlobDetails { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _ = GetBlobDetails();
    }

    private void OnFilesUploaded(IList<Models.BlobDetail> uploadedBlobDetails)
    {
        foreach (var detail in uploadedBlobDetails)
        {
            BlobDetails?.Add(detail);
        }
        ShowOverlay = false;
        StateHasChanged();
    }

    private async Task GetBlobDetails()
    {
        BlobDetails = await _blobService.GetBlobDetails();
        StateHasChanged();
    }

    private async Task ShowFullImage(Models.BlobDetail blobDetail)
    {
        FullImageBlobDetails = blobDetail; 
        overlayType = Consts.OverlayType.Image; 
        ShowOverlay = true;
        StateHasChanged();
    }

    private async Task<string> GetBase64Image()
    {
        if (FullImageBlobDetails != null)
        {
            using (Stream fStream = await _blobService.GetThumbnail(FullImageBlobDetails.Id))
            {
                int bytesRead = 0;
                byte[] buffer = new byte[1024];
                List<byte> base64Data = new List<byte>();

                do
                {
                    bytesRead = await fStream.ReadAsync(buffer, 0, 1024);
                    base64Data.AddRange(buffer[..bytesRead]);
                } while (bytesRead > 0);

                string base64Image = Convert.ToBase64String(base64Data.ToArray());

                return string.Format("data:image/png;base64, {0}", base64Image);
            }
        }

        return string.Empty;
    }
}
